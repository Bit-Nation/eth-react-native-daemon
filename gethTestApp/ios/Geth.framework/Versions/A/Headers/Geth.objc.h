// Objective-C API for talking to github.com/ethereum/go-ethereum/mobile Go package.
//   gobind -lang=objc github.com/ethereum/go-ethereum/mobile
//
// File is generated by gobind. Do not edit.

#ifndef __Geth_H__
#define __Geth_H__

@import Foundation;
#include "Universe.objc.h"


@class GethAccount;
@class GethAccounts;
@class GethAddress;
@class GethAddresses;
@class GethBigInt;
@class GethBigInts;
@class GethBlock;
@class GethBloom;
@class GethBoundContract;
@class GethCallMsg;
@class GethCallOpts;
@class GethContext;
@class GethEnode;
@class GethEnodes;
@class GethEthereumClient;
@class GethFilterQuery;
@class GethHash;
@class GethHashes;
@class GethHeader;
@class GethHeaders;
@class GethInterface;
@class GethInterfaces;
@class GethKeyStore;
@class GethLog;
@class GethLogs;
@class GethNode;
@class GethNodeConfig;
@class GethNodeInfo;
@class GethNonce;
@class GethPeerInfo;
@class GethPeerInfos;
@class GethReceipt;
@class GethStrings;
@class GethSubscription;
@class GethSyncProgress;
@class GethTopics;
@class GethTransactOpts;
@class GethTransaction;
@class GethTransactions;
@protocol GethFilterLogsHandler;
@class GethFilterLogsHandler;
@protocol GethNewHeadHandler;
@class GethNewHeadHandler;
@protocol GethSigner;
@class GethSigner;

@protocol GethFilterLogsHandler <NSObject>
- (void)onError:(NSString*)failure;
- (void)onFilterLogs:(GethLog*)log;
@end

@protocol GethNewHeadHandler <NSObject>
- (void)onError:(NSString*)failure;
- (void)onNewHead:(GethHeader*)header;
@end

@protocol GethSigner <NSObject>
- (GethTransaction*)sign:(GethAddress*)p0 p1:(GethTransaction*)p1 error:(NSError**)error;
@end

/**
 * Account represents a stored key.
 */
@interface GethAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * GetAddress retrieves the address associated with the account.
 */
- (GethAddress*)getAddress;
/**
 * GetURL retrieves the canonical URL of the account.
 */
- (NSString*)getURL;
@end

/**
 * Accounts represents a slice of accounts.
 */
@interface GethAccounts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Get returns the account at the given index from the slice.
 */
- (GethAccount*)get:(long)index error:(NSError**)error;
/**
 * Set sets the account at the given index in the slice.
 */
- (BOOL)set:(long)index account:(GethAccount*)account error:(NSError**)error;
/**
 * Size returns the number of accounts in the slice.
 */
- (long)size;
@end

/**
 * Address represents the 20 byte address of an Ethereum account.
 */
@interface GethAddress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewAddressFromBytes converts a slice of bytes to a hash value.
 */
- (instancetype)initFromBytes:(NSData*)binary;
/**
 * NewAddressFromHex converts a hex string to a address value.
 */
- (instancetype)initFromHex:(NSString*)hex;
/**
 * GetBytes retrieves the byte representation of the address.
 */
- (NSData*)getBytes;
/**
 * GetHex retrieves the hex string representation of the address.
 */
- (NSString*)getHex;
/**
 * SetBytes sets the specified slice of bytes as the address value.
 */
- (BOOL)setBytes:(NSData*)address error:(NSError**)error;
/**
 * SetHex sets the specified hex string as the address value.
 */
- (BOOL)setHex:(NSString*)address error:(NSError**)error;
@end

/**
 * Addresses represents a slice of addresses.
 */
@interface GethAddresses : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewAddresses creates a slice of uninitialized addresses.
 */
- (instancetype)init:(long)size;
/**
 * NewAddressesEmpty creates an empty slice of Addresses values.
 */
- (instancetype)initEmpty;
/**
 * Append adds a new address element to the end of the slice.
 */
- (void)append:(GethAddress*)address;
/**
 * Get returns the address at the given index from the slice.
 */
- (GethAddress*)get:(long)index error:(NSError**)error;
/**
 * Set sets the address at the given index in the slice.
 */
- (BOOL)set:(long)index address:(GethAddress*)address error:(NSError**)error;
/**
 * Size returns the number of addresses in the slice.
 */
- (long)size;
@end

/**
 * A BigInt represents a signed multi-precision integer.
 */
@interface GethBigInt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewBigInt allocates and returns a new BigInt set to x.
 */
- (instancetype)init:(int64_t)x;
/**
 * GetBytes returns the absolute value of x as a big-endian byte slice.
 */
- (NSData*)getBytes;
/**
 * GetInt64 returns the int64 representation of x. If x cannot be represented in
an int64, the result is undefined.
 */
- (int64_t)getInt64;
/**
 * GetString returns the value of x as a formatted string in some number base.
 */
- (NSString*)getString:(long)base;
/**
 * SetBytes interprets buf as the bytes of a big-endian unsigned integer and sets
the big int to that value.
 */
- (void)setBytes:(NSData*)buf;
/**
 * SetInt64 sets the big int to x.
 */
- (void)setInt64:(int64_t)x;
/**
 * SetString sets the big int to x.

The string prefix determines the actual conversion base. A prefix of "0x" or
"0X" selects base 16; the "0" prefix selects base 8, and a "0b" or "0B" prefix
selects base 2. Otherwise the selected base is 10.
 */
- (void)setString:(NSString*)x base:(long)base;
/**
 * Sign returns:

	-1 if x <  0
	 0 if x == 0
	+1 if x >  0
 */
- (long)sign;
/**
 * String returns the value of x as a formatted decimal string.
 */
- (NSString*)string;
@end

/**
 * BigInts represents a slice of big ints.
 */
@interface GethBigInts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Get returns the bigint at the given index from the slice.
 */
- (GethBigInt*)get:(long)index error:(NSError**)error;
/**
 * Set sets the big int at the given index in the slice.
 */
- (BOOL)set:(long)index bigint:(GethBigInt*)bigint error:(NSError**)error;
/**
 * Size returns the number of big ints in the slice.
 */
- (long)size;
@end

/**
 * Block represents an entire block in the Ethereum blockchain.
 */
@interface GethBlock : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewBlockFromJSON parses a block from an JSON data dump.
 */
- (instancetype)initFromJSON:(NSString*)data;
/**
 * NewBlockFromRLP parses a block from an RLP data dump.
 */
- (instancetype)initFromRLP:(NSData*)data;
/**
 * EncodeJSON encodes a block into an JSON data dump.
 */
- (NSString*)encodeJSON:(NSError**)error;
/**
 * EncodeRLP encodes a block into an RLP data dump.
 */
- (NSData*)encodeRLP:(NSError**)error;
- (GethBloom*)getBloom;
- (GethAddress*)getCoinbase;
- (GethBigInt*)getDifficulty;
- (NSData*)getExtra;
- (int64_t)getGasLimit;
- (int64_t)getGasUsed;
- (GethHash*)getHash;
- (GethHash*)getHashNoNonce;
- (GethHeader*)getHeader;
- (GethHash*)getMixDigest;
- (int64_t)getNonce;
- (int64_t)getNumber;
- (GethHash*)getParentHash;
- (GethHash*)getReceiptHash;
- (GethHash*)getRoot;
- (int64_t)getTime;
- (GethTransaction*)getTransaction:(GethHash*)hash;
- (GethTransactions*)getTransactions;
- (GethHash*)getTxHash;
- (GethHash*)getUncleHash;
- (GethHeaders*)getUncles;
/**
 * String implements the fmt.Stringer interface to print some semi-meaningful
data dump of the block for debugging purposes.
 */
- (NSString*)string;
@end

/**
 * Bloom represents a 256 bit bloom filter.
 */
@interface GethBloom : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * GetBytes retrieves the byte representation of the bloom filter.
 */
- (NSData*)getBytes;
/**
 * GetHex retrieves the hex string representation of the bloom filter.
 */
- (NSString*)getHex;
@end

/**
 * BoundContract is the base wrapper object that reflects a contract on the
Ethereum network. It contains a collection of methods that are used by the
higher level contract bindings to operate.
 */
@interface GethBoundContract : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Call invokes the (constant) contract method with params as input values and
sets the output to result.
 */
- (BOOL)call:(GethCallOpts*)opts out_:(GethInterfaces*)out_ method:(NSString*)method args:(GethInterfaces*)args error:(NSError**)error;
- (GethAddress*)getAddress;
- (GethTransaction*)getDeployer;
/**
 * Transact invokes the (paid) contract method with params as input values.
 */
- (GethTransaction*)transact:(GethTransactOpts*)opts method:(NSString*)method args:(GethInterfaces*)args error:(NSError**)error;
/**
 * Transfer initiates a plain transaction to move funds to the contract, calling
its default method if one is available.
 */
- (GethTransaction*)transfer:(GethTransactOpts*)opts error:(NSError**)error;
@end

/**
 * CallMsg contains parameters for contract calls.
 */
@interface GethCallMsg : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewCallMsg creates an empty contract call parameter list.
 */
- (instancetype)init;
- (NSData*)getData;
- (GethAddress*)getFrom;
- (int64_t)getGas;
- (GethBigInt*)getGasPrice;
- (GethAddress*)getTo;
- (GethBigInt*)getValue;
- (void)setData:(NSData*)data;
- (void)setFrom:(GethAddress*)address;
- (void)setGas:(int64_t)gas;
- (void)setGasPrice:(GethBigInt*)price;
- (void)setTo:(GethAddress*)address;
- (void)setValue:(GethBigInt*)value;
@end

/**
 * CallOpts is the collection of options to fine tune a contract call request.
 */
@interface GethCallOpts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewCallOpts creates a new option set for contract calls.
 */
- (instancetype)init;
- (int64_t)getGasLimit;
- (BOOL)isPending;
- (void)setContext:(GethContext*)context;
- (void)setGasLimit:(int64_t)limit;
- (void)setPending:(BOOL)pending;
@end

/**
 * Context carries a deadline, a cancelation signal, and other values across API
boundaries.
 */
@interface GethContext : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewContext returns a non-nil, empty Context. It is never canceled, has no
values, and has no deadline. It is typically used by the main function,
initialization, and tests, and as the top-level Context for incoming requests.
 */
- (instancetype)init;
/**
 * WithCancel returns a copy of the original context with cancellation mechanism
included.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GethContext*)withCancel;
/**
 * WithDeadline returns a copy of the original context with the deadline adjusted
to be no later than the specified time.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GethContext*)withDeadline:(int64_t)sec nsec:(int64_t)nsec;
/**
 * WithTimeout returns a copy of the original context with the deadline adjusted
to be no later than now + the duration specified.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GethContext*)withTimeout:(int64_t)nsec;
@end

/**
 * Enode represents a host on the network.
 */
@interface GethEnode : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewEnode parses a node designator.

There are two basic forms of node designators
  - incomplete nodes, which only have the public key (node ID)
  - complete nodes, which contain the public key and IP/Port information

For incomplete nodes, the designator must look like one of these

   enode://<hex node id>
   <hex node id>

For complete nodes, the node ID is encoded in the username portion
of the URL, separated from the host by an @ sign. The hostname can
only be given as an IP address, DNS domain names are not allowed.
The port in the host name section is the TCP listening port. If the
TCP and UDP (discovery) ports differ, the UDP port is specified as
query parameter "discport".

In the following example, the node URL describes
a node with IP address 10.3.58.6, TCP listening port 30303
and UDP discovery port 30301.

   enode://<hex node id>@10.3.58.6:30303?discport=30301
 */
- (instancetype)init:(NSString*)rawurl;
@end

/**
 * Enodes represents a slice of accounts.
 */
@interface GethEnodes : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewEnodes creates a slice of uninitialized enodes.
 */
- (instancetype)init:(long)size;
/**
 * NewEnodesEmpty creates an empty slice of Enode values.
 */
- (instancetype)initEmpty;
/**
 * Append adds a new enode element to the end of the slice.
 */
- (void)append:(GethEnode*)enode;
/**
 * Get returns the enode at the given index from the slice.
 */
- (GethEnode*)get:(long)index error:(NSError**)error;
/**
 * Set sets the enode at the given index in the slice.
 */
- (BOOL)set:(long)index enode:(GethEnode*)enode error:(NSError**)error;
/**
 * Size returns the number of enodes in the slice.
 */
- (long)size;
@end

/**
 * EthereumClient provides access to the Ethereum APIs.
 */
@interface GethEthereumClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewEthereumClient connects a client to the given URL.
 */
- (instancetype)init:(NSString*)rawurl;
/**
 * CallContract executes a message call transaction, which is directly executed in the VM
of the node, but never mined into the blockchain.

blockNumber selects the block height at which the call runs. It can be <0, in which
case the code is taken from the latest known block. Note that state from very old
blocks might not be available.
 */
- (NSData*)callContract:(GethContext*)ctx msg:(GethCallMsg*)msg number:(int64_t)number error:(NSError**)error;
/**
 * EstimateGas tries to estimate the gas needed to execute a specific transaction based on
the current pending state of the backend blockchain. There is no guarantee that this is
the true gas limit requirement as other transactions may be added or removed by miners,
but it should provide a basis for setting a reasonable default.
 */
- (GethBigInt*)estimateGas:(GethContext*)ctx msg:(GethCallMsg*)msg error:(NSError**)error;
/**
 * FilterLogs executes a filter query.
 */
- (GethLogs*)filterLogs:(GethContext*)ctx query:(GethFilterQuery*)query error:(NSError**)error;
/**
 * GetBalanceAt returns the wei balance of the given account.
The block number can be <0, in which case the balance is taken from the latest known block.
 */
- (GethBigInt*)getBalanceAt:(GethContext*)ctx account:(GethAddress*)account number:(int64_t)number error:(NSError**)error;
/**
 * GetBlockByHash returns the given full block.
 */
- (GethBlock*)getBlockByHash:(GethContext*)ctx hash:(GethHash*)hash error:(NSError**)error;
/**
 * GetBlockByNumber returns a block from the current canonical chain. If number is <0, the
latest known block is returned.
 */
- (GethBlock*)getBlockByNumber:(GethContext*)ctx number:(int64_t)number error:(NSError**)error;
/**
 * GetCodeAt returns the contract code of the given account.
The block number can be <0, in which case the code is taken from the latest known block.
 */
- (NSData*)getCodeAt:(GethContext*)ctx account:(GethAddress*)account number:(int64_t)number error:(NSError**)error;
/**
 * GetHeaderByHash returns the block header with the given hash.
 */
- (GethHeader*)getHeaderByHash:(GethContext*)ctx hash:(GethHash*)hash error:(NSError**)error;
/**
 * GetHeaderByNumber returns a block header from the current canonical chain. If number is <0,
the latest known header is returned.
 */
- (GethHeader*)getHeaderByNumber:(GethContext*)ctx number:(int64_t)number error:(NSError**)error;
/**
 * GetNonceAt returns the account nonce of the given account.
The block number can be <0, in which case the nonce is taken from the latest known block.
 */
- (BOOL)getNonceAt:(GethContext*)ctx account:(GethAddress*)account number:(int64_t)number nonce:(int64_t*)nonce error:(NSError**)error;
/**
 * GetPendingBalanceAt returns the wei balance of the given account in the pending state.
 */
- (GethBigInt*)getPendingBalanceAt:(GethContext*)ctx account:(GethAddress*)account error:(NSError**)error;
/**
 * GetPendingCodeAt returns the contract code of the given account in the pending state.
 */
- (NSData*)getPendingCodeAt:(GethContext*)ctx account:(GethAddress*)account error:(NSError**)error;
/**
 * GetPendingNonceAt returns the account nonce of the given account in the pending state.
This is the nonce that should be used for the next transaction.
 */
- (BOOL)getPendingNonceAt:(GethContext*)ctx account:(GethAddress*)account nonce:(int64_t*)nonce error:(NSError**)error;
/**
 * GetPendingStorageAt returns the value of key in the contract storage of the given account in the pending state.
 */
- (NSData*)getPendingStorageAt:(GethContext*)ctx account:(GethAddress*)account key:(GethHash*)key error:(NSError**)error;
/**
 * GetPendingTransactionCount returns the total number of transactions in the pending state.
 */
- (BOOL)getPendingTransactionCount:(GethContext*)ctx count:(long*)count error:(NSError**)error;
/**
 * GetStorageAt returns the value of key in the contract storage of the given account.
The block number can be <0, in which case the value is taken from the latest known block.
 */
- (NSData*)getStorageAt:(GethContext*)ctx account:(GethAddress*)account key:(GethHash*)key number:(int64_t)number error:(NSError**)error;
/**
 * GetTransactionByHash returns the transaction with the given hash.
 */
- (GethTransaction*)getTransactionByHash:(GethContext*)ctx hash:(GethHash*)hash error:(NSError**)error;
/**
 * GetTransactionCount returns the total number of transactions in the given block.
 */
- (BOOL)getTransactionCount:(GethContext*)ctx hash:(GethHash*)hash count:(long*)count error:(NSError**)error;
/**
 * GetTransactionInBlock returns a single transaction at index in the given block.
 */
- (GethTransaction*)getTransactionInBlock:(GethContext*)ctx hash:(GethHash*)hash index:(long)index error:(NSError**)error;
/**
 * GetTransactionReceipt returns the receipt of a transaction by transaction hash.
Note that the receipt is not available for pending transactions.
 */
- (GethReceipt*)getTransactionReceipt:(GethContext*)ctx hash:(GethHash*)hash error:(NSError**)error;
/**
 * GetTransactionSender returns the sender address of a transaction. The transaction must
be included in blockchain at the given block and index.
 */
- (GethAddress*)getTransactionSender:(GethContext*)ctx tx:(GethTransaction*)tx blockhash:(GethHash*)blockhash index:(long)index error:(NSError**)error;
/**
 * PendingCallContract executes a message call transaction using the EVM.
The state seen by the contract call is the pending state.
 */
- (NSData*)pendingCallContract:(GethContext*)ctx msg:(GethCallMsg*)msg error:(NSError**)error;
/**
 * SendTransaction injects a signed transaction into the pending pool for execution.

If the transaction was a contract creation use the TransactionReceipt method to get the
contract address after the transaction has been mined.
 */
- (BOOL)sendTransaction:(GethContext*)ctx tx:(GethTransaction*)tx error:(NSError**)error;
/**
 * SubscribeFilterLogs subscribes to the results of a streaming filter query.
 */
- (GethSubscription*)subscribeFilterLogs:(GethContext*)ctx query:(GethFilterQuery*)query handler:(id<GethFilterLogsHandler>)handler buffer:(long)buffer error:(NSError**)error;
/**
 * SubscribeNewHead subscribes to notifications about the current blockchain head
on the given channel.
 */
- (GethSubscription*)subscribeNewHead:(GethContext*)ctx handler:(id<GethNewHeadHandler>)handler buffer:(long)buffer error:(NSError**)error;
/**
 * SuggestGasPrice retrieves the currently suggested gas price to allow a timely
execution of a transaction.
 */
- (GethBigInt*)suggestGasPrice:(GethContext*)ctx error:(NSError**)error;
/**
 * SyncProgress retrieves the current progress of the sync algorithm. If there's
no sync currently running, it returns nil.
 */
- (GethSyncProgress*)syncProgress:(GethContext*)ctx error:(NSError**)error;
@end

/**
 * FilterQuery contains options for contact log filtering.
 */
@interface GethFilterQuery : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewFilterQuery creates an empty filter query for contact log filtering.
 */
- (instancetype)init;
- (GethAddresses*)getAddresses;
- (GethBigInt*)getFromBlock;
- (GethBigInt*)getToBlock;
- (GethTopics*)getTopics;
- (void)setAddresses:(GethAddresses*)addresses;
- (void)setFromBlock:(GethBigInt*)fromBlock;
- (void)setToBlock:(GethBigInt*)toBlock;
- (void)setTopics:(GethTopics*)topics;
@end

/**
 * Hash represents the 32 byte Keccak256 hash of arbitrary data.
 */
@interface GethHash : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewHashFromBytes converts a slice of bytes to a hash value.
 */
- (instancetype)initFromBytes:(NSData*)binary;
/**
 * NewHashFromHex converts a hex string to a hash value.
 */
- (instancetype)initFromHex:(NSString*)hex;
/**
 * GetBytes retrieves the byte representation of the hash.
 */
- (NSData*)getBytes;
/**
 * GetHex retrieves the hex string representation of the hash.
 */
- (NSString*)getHex;
/**
 * SetBytes sets the specified slice of bytes as the hash value.
 */
- (BOOL)setBytes:(NSData*)hash error:(NSError**)error;
/**
 * SetHex sets the specified hex string as the hash value.
 */
- (BOOL)setHex:(NSString*)hash error:(NSError**)error;
@end

/**
 * Hashes represents a slice of hashes.
 */
@interface GethHashes : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewHashes creates a slice of uninitialized Hashes.
 */
- (instancetype)init:(long)size;
/**
 * NewHashesEmpty creates an empty slice of Hashes values.
 */
- (instancetype)initEmpty;
/**
 * Append adds a new Hash element to the end of the slice.
 */
- (void)append:(GethHash*)hash;
/**
 * Get returns the hash at the given index from the slice.
 */
- (GethHash*)get:(long)index error:(NSError**)error;
/**
 * Set sets the Hash at the given index in the slice.
 */
- (BOOL)set:(long)index hash:(GethHash*)hash error:(NSError**)error;
/**
 * Size returns the number of hashes in the slice.
 */
- (long)size;
@end

/**
 * Header represents a block header in the Ethereum blockchain.
 */
@interface GethHeader : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewHeaderFromJSON parses a header from an JSON data dump.
 */
- (instancetype)initFromJSON:(NSString*)data;
/**
 * NewHeaderFromRLP parses a header from an RLP data dump.
 */
- (instancetype)initFromRLP:(NSData*)data;
/**
 * EncodeJSON encodes a header into an JSON data dump.
 */
- (NSString*)encodeJSON:(NSError**)error;
/**
 * EncodeRLP encodes a header into an RLP data dump.
 */
- (NSData*)encodeRLP:(NSError**)error;
- (GethBloom*)getBloom;
- (GethAddress*)getCoinbase;
- (GethBigInt*)getDifficulty;
- (NSData*)getExtra;
- (int64_t)getGasLimit;
- (int64_t)getGasUsed;
- (GethHash*)getHash;
- (GethHash*)getMixDigest;
- (GethNonce*)getNonce;
- (int64_t)getNumber;
- (GethHash*)getParentHash;
- (GethHash*)getReceiptHash;
- (GethHash*)getRoot;
- (int64_t)getTime;
- (GethHash*)getTxHash;
- (GethHash*)getUncleHash;
/**
 * String implements the fmt.Stringer interface to print some semi-meaningful
data dump of the header for debugging purposes.
 */
- (NSString*)string;
@end

/**
 * Headers represents a slice of headers.
 */
@interface GethHeaders : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Get returns the header at the given index from the slice.
 */
- (GethHeader*)get:(long)index error:(NSError**)error;
/**
 * Size returns the number of headers in the slice.
 */
- (long)size;
@end

/**
 * Interface represents a wrapped version of Go's interface{}, with the capacity
to store arbitrary data types.

Since it's impossible to get the arbitrary-ness converted between Go and mobile
platforms, we're using explicit getters and setters for the conversions. There
is of course no point in enumerating everything, just enough to support the
contract bindins requiring client side generated code.
 */
@interface GethInterface : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewInterface creates a new empty interface that can be used to pass around
generic types.
 */
- (instancetype)init;
- (GethAddress*)getAddress;
- (GethAddresses*)getAddresses;
- (GethBigInt*)getBigInt;
- (GethBigInts*)getBigInts;
// skipped method Interface.GetBinaries with unsupported parameter or return types

- (NSData*)getBinary;
- (BOOL)getBool;
// skipped method Interface.GetBools with unsupported parameter or return types

- (GethHash*)getHash;
- (GethHashes*)getHashes;
- (int16_t)getInt16;
- (int32_t)getInt32;
- (int64_t)getInt64;
- (int8_t)getInt8;
- (NSString*)getString;
- (GethStrings*)getStrings;
- (GethBigInt*)getUint16;
- (GethBigInt*)getUint32;
- (GethBigInt*)getUint64;
- (GethBigInt*)getUint8;
- (void)setAddress:(GethAddress*)address;
- (void)setAddresses:(GethAddresses*)addrs;
- (void)setBigInt:(GethBigInt*)bigint;
- (void)setBigInts:(GethBigInts*)bigints;
// skipped method Interface.SetBinaries with unsupported parameter or return types

- (void)setBinary:(NSData*)binary;
- (void)setBool:(BOOL)b;
// skipped method Interface.SetBools with unsupported parameter or return types

- (void)setDefaultAddress;
- (void)setDefaultAddresses;
- (void)setDefaultBigInt;
- (void)setDefaultBigInts;
- (void)setDefaultBinaries;
- (void)setDefaultBinary;
- (void)setDefaultBool;
- (void)setDefaultBools;
- (void)setDefaultHash;
- (void)setDefaultHashes;
- (void)setDefaultInt16;
- (void)setDefaultInt32;
- (void)setDefaultInt64;
- (void)setDefaultInt8;
- (void)setDefaultString;
- (void)setDefaultStrings;
- (void)setDefaultUint16;
- (void)setDefaultUint32;
- (void)setDefaultUint64;
- (void)setDefaultUint8;
- (void)setHash:(GethHash*)hash;
- (void)setHashes:(GethHashes*)hashes;
- (void)setInt16:(int16_t)n;
- (void)setInt32:(int32_t)n;
- (void)setInt64:(int64_t)n;
- (void)setInt8:(int8_t)n;
- (void)setString:(NSString*)str;
- (void)setStrings:(GethStrings*)strs;
- (void)setUint16:(GethBigInt*)bigint;
- (void)setUint32:(GethBigInt*)bigint;
- (void)setUint64:(GethBigInt*)bigint;
- (void)setUint8:(GethBigInt*)bigint;
@end

/**
 * Interfaces is a slices of wrapped generic objects.
 */
@interface GethInterfaces : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewInterfaces creates a slice of uninitialized interfaces.
 */
- (instancetype)init:(long)size;
/**
 * Get returns the bigint at the given index from the slice.
 */
- (GethInterface*)get:(long)index error:(NSError**)error;
/**
 * Set sets the big int at the given index in the slice.
 */
- (BOOL)set:(long)index object:(GethInterface*)object error:(NSError**)error;
/**
 * Size returns the number of interfaces in the slice.
 */
- (long)size;
@end

/**
 * KeyStore manages a key storage directory on disk.
 */
@interface GethKeyStore : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewKeyStore creates a keystore for the given directory.
 */
- (instancetype)init:(NSString*)keydir scryptN:(long)scryptN scryptP:(long)scryptP;
/**
 * DeleteAccount deletes the key matched by account if the passphrase is correct.
If a contains no filename, the address must match a unique key.
 */
- (BOOL)deleteAccount:(GethAccount*)account passphrase:(NSString*)passphrase error:(NSError**)error;
/**
 * ExportKey exports as a JSON key, encrypted with newPassphrase.
 */
- (NSData*)exportKey:(GethAccount*)account passphrase:(NSString*)passphrase newPassphrase:(NSString*)newPassphrase error:(NSError**)error;
/**
 * GetAccounts returns all key files present in the directory.
 */
- (GethAccounts*)getAccounts;
/**
 * HasAddress reports whether a key with the given address is present.
 */
- (BOOL)hasAddress:(GethAddress*)address;
/**
 * ImportECDSAKey stores the given encrypted JSON key into the key directory.
 */
- (GethAccount*)importECDSAKey:(NSData*)key passphrase:(NSString*)passphrase error:(NSError**)error;
/**
 * ImportKey stores the given encrypted JSON key into the key directory.
 */
- (GethAccount*)importKey:(NSData*)keyJSON passphrase:(NSString*)passphrase newPassphrase:(NSString*)newPassphrase error:(NSError**)error;
/**
 * ImportPreSaleKey decrypts the given Ethereum presale wallet and stores
a key file in the key directory. The key file is encrypted with the same passphrase.
 */
- (GethAccount*)importPreSaleKey:(NSData*)keyJSON passphrase:(NSString*)passphrase error:(NSError**)error;
/**
 * Lock removes the private key with the given address from memory.
 */
- (BOOL)lock:(GethAddress*)address error:(NSError**)error;
/**
 * NewAccount generates a new key and stores it into the key directory,
encrypting it with the passphrase.
 */
- (GethAccount*)newAccount:(NSString*)passphrase error:(NSError**)error;
/**
 * SignHash calculates a ECDSA signature for the given hash. The produced signature
is in the [R || S || V] format where V is 0 or 1.
 */
- (NSData*)signHash:(GethAddress*)address hash:(NSData*)hash error:(NSError**)error;
/**
 * SignHashPassphrase signs hash if the private key matching the given address can
be decrypted with the given passphrase. The produced signature is in the
[R || S || V] format where V is 0 or 1.
 */
- (NSData*)signHashPassphrase:(GethAccount*)account passphrase:(NSString*)passphrase hash:(NSData*)hash error:(NSError**)error;
/**
 * SignTx signs the given transaction with the requested account.
 */
- (GethTransaction*)signTx:(GethAccount*)account tx:(GethTransaction*)tx chainID:(GethBigInt*)chainID error:(NSError**)error;
/**
 * SignTxPassphrase signs the transaction if the private key matching the
given address can be decrypted with the given passphrase.
 */
- (GethTransaction*)signTxPassphrase:(GethAccount*)account passphrase:(NSString*)passphrase tx:(GethTransaction*)tx chainID:(GethBigInt*)chainID error:(NSError**)error;
/**
 * TimedUnlock unlocks the given account with the passphrase. The account stays
unlocked for the duration of timeout (nanoseconds). A timeout of 0 unlocks the
account until the program exits. The account must match a unique key file.

If the account address is already unlocked for a duration, TimedUnlock extends or
shortens the active unlock timeout. If the address was previously unlocked
indefinitely the timeout is not altered.
 */
- (BOOL)timedUnlock:(GethAccount*)account passphrase:(NSString*)passphrase timeout:(int64_t)timeout error:(NSError**)error;
/**
 * Unlock unlocks the given account indefinitely.
 */
- (BOOL)unlock:(GethAccount*)account passphrase:(NSString*)passphrase error:(NSError**)error;
/**
 * UpdateAccount changes the passphrase of an existing account.
 */
- (BOOL)updateAccount:(GethAccount*)account passphrase:(NSString*)passphrase newPassphrase:(NSString*)newPassphrase error:(NSError**)error;
@end

/**
 * Log represents a contract log event. These events are generated by the LOG
opcode and stored/indexed by the node.
 */
@interface GethLog : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (GethAddress*)getAddress;
- (GethHash*)getBlockHash;
- (int64_t)getBlockNumber;
- (NSData*)getData;
- (long)getIndex;
- (GethHashes*)getTopics;
- (GethHash*)getTxHash;
- (long)getTxIndex;
@end

/**
 * Logs represents a slice of VM logs.
 */
@interface GethLogs : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Get returns the log at the given index from the slice.
 */
- (GethLog*)get:(long)index error:(NSError**)error;
/**
 * Size returns the number of logs in the slice.
 */
- (long)size;
@end

/**
 * Node represents a Geth Ethereum node instance.
 */
@interface GethNode : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewNode creates and configures a new Geth node.
 */
- (instancetype)init:(NSString*)datadir config:(GethNodeConfig*)config;
/**
 * GetEthereumClient retrieves a client to access the Ethereum subsystem.
 */
- (GethEthereumClient*)getEthereumClient:(NSError**)error;
/**
 * GetNodeInfo gathers and returns a collection of metadata known about the host.
 */
- (GethNodeInfo*)getNodeInfo;
/**
 * GetPeersInfo returns an array of metadata objects describing connected peers.
 */
- (GethPeerInfos*)getPeersInfo;
/**
 * Start creates a live P2P node and starts running it.
 */
- (BOOL)start:(NSError**)error;
/**
 * Stop terminates a running node along with all it's services. In the node was
not started, an error is returned.
 */
- (BOOL)stop:(NSError**)error;
@end

/**
 * NodeConfig represents the collection of configuration values to fine tune the Geth
node embedded into a mobile process. The available values are a subset of the
entire API provided by go-ethereum to reduce the maintenance surface and dev
complexity.
 */
@interface GethNodeConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewNodeConfig creates a new node option set, initialized to the default values.
 */
- (instancetype)init;
/**
 * Bootstrap nodes used to establish connectivity with the rest of the network.
 */
- (GethEnodes*)bootstrapNodes;
- (void)setBootstrapNodes:(GethEnodes*)v;
/**
 * MaxPeers is the maximum number of peers that can be connected. If this is
set to zero, then only the configured static and trusted peers can connect.
 */
- (long)maxPeers;
- (void)setMaxPeers:(long)v;
/**
 * EthereumEnabled specifies whether the node should run the Ethereum protocol.
 */
- (BOOL)ethereumEnabled;
- (void)setEthereumEnabled:(BOOL)v;
/**
 * EthereumNetworkID is the network identifier used by the Ethereum protocol to
decide if remote peers should be accepted or not.
 */
- (int64_t)ethereumNetworkID;
- (void)setEthereumNetworkID:(int64_t)v;
/**
 * EthereumGenesis is the genesis JSON to use to seed the blockchain with. An
empty genesis state is equivalent to using the mainnet's state.
 */
- (NSString*)ethereumGenesis;
- (void)setEthereumGenesis:(NSString*)v;
/**
 * EthereumDatabaseCache is the system memory in MB to allocate for database caching.
A minimum of 16MB is always reserved.
 */
- (long)ethereumDatabaseCache;
- (void)setEthereumDatabaseCache:(long)v;
/**
 * EthereumNetStats is a netstats connection string to use to report various
chain, transaction and node stats to a monitoring server.

It has the form "nodename:secret@host:port"
 */
- (NSString*)ethereumNetStats;
- (void)setEthereumNetStats:(NSString*)v;
/**
 * WhisperEnabled specifies whether the node should run the Whisper protocol.
 */
- (BOOL)whisperEnabled;
- (void)setWhisperEnabled:(BOOL)v;
@end

/**
 * NodeInfo represents pi short summary of the information known about the host.
 */
@interface GethNodeInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (long)getDiscoveryPort;
- (NSString*)getEnode;
- (NSString*)getID;
- (NSString*)getIP;
- (NSString*)getListenerAddress;
- (long)getListenerPort;
- (NSString*)getName;
- (GethStrings*)getProtocols;
@end

/**
 * A Nonce is a 64-bit hash which proves (combined with the mix-hash) that
a sufficient amount of computation has been carried out on a block.
 */
@interface GethNonce : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * GetBytes retrieves the byte representation of the block nonce.
 */
- (NSData*)getBytes;
/**
 * GetHex retrieves the hex string representation of the block nonce.
 */
- (NSString*)getHex;
@end

/**
 * PeerInfo represents pi short summary of the information known about pi connected peer.
 */
@interface GethPeerInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (GethStrings*)getCaps;
- (NSString*)getID;
- (NSString*)getLocalAddress;
- (NSString*)getName;
- (NSString*)getRemoteAddress;
@end

/**
 * PeerInfos represents a slice of infos about remote peers.
 */
@interface GethPeerInfos : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Get returns the peer info at the given index from the slice.
 */
- (GethPeerInfo*)get:(long)index error:(NSError**)error;
/**
 * Size returns the number of peer info entries in the slice.
 */
- (long)size;
@end

/**
 * Receipt represents the results of a transaction.
 */
@interface GethReceipt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewReceiptFromJSON parses a transaction receipt from an JSON data dump.
 */
- (instancetype)initFromJSON:(NSString*)data;
/**
 * NewReceiptFromRLP parses a transaction receipt from an RLP data dump.
 */
- (instancetype)initFromRLP:(NSData*)data;
/**
 * EncodeJSON encodes a transaction receipt into an JSON data dump.
 */
- (NSString*)encodeJSON:(NSError**)error;
/**
 * EncodeRLP encodes a transaction receipt into an RLP data dump.
 */
- (NSData*)encodeRLP:(NSError**)error;
- (GethBloom*)getBloom;
- (GethAddress*)getContractAddress;
- (GethBigInt*)getCumulativeGasUsed;
- (GethBigInt*)getGasUsed;
- (GethLogs*)getLogs;
- (NSData*)getPostState;
- (GethHash*)getTxHash;
/**
 * String implements the fmt.Stringer interface to print some semi-meaningful
data dump of the transaction receipt for debugging purposes.
 */
- (NSString*)string;
@end

/**
 * Strings represents s slice of strs.
 */
@interface GethStrings : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Get returns the string at the given index from the slice.
 */
- (NSString*)get:(long)index error:(NSError**)error;
/**
 * Set sets the string at the given index in the slice.
 */
- (BOOL)set:(long)index str:(NSString*)str error:(NSError**)error;
/**
 * Size returns the number of strs in the slice.
 */
- (long)size;
/**
 * String implements the Stringer interface.
 */
- (NSString*)string;
@end

/**
 * Subscription represents an event subscription where events are
delivered on a data channel.
 */
@interface GethSubscription : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Unsubscribe cancels the sending of events to the data channel
and closes the error channel.
 */
- (void)unsubscribe;
@end

/**
 * SyncProgress gives progress indications when the node is synchronising with
the Ethereum network.
 */
@interface GethSyncProgress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (int64_t)getCurrentBlock;
- (int64_t)getHighestBlock;
- (int64_t)getKnownStates;
- (int64_t)getPulledStates;
- (int64_t)getStartingBlock;
@end

/**
 * Topics is a set of topic lists to filter events with.
 */
@interface GethTopics : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewTopics creates a slice of uninitialized Topics.
 */
- (instancetype)init:(long)size;
/**
 * NewTopicsEmpty creates an empty slice of Topics values.
 */
- (instancetype)initEmpty;
/**
 * Append adds a new topic list to the end of the slice.
 */
- (void)append:(GethHashes*)topics;
/**
 * Get returns the topic list at the given index from the slice.
 */
- (GethHashes*)get:(long)index error:(NSError**)error;
/**
 * Set sets the topic list at the given index in the slice.
 */
- (BOOL)set:(long)index topics:(GethHashes*)topics error:(NSError**)error;
/**
 * Size returns the number of topic lists inside the set
 */
- (long)size;
@end

/**
 * TransactOpts is the collection of authorization data required to create a
valid Ethereum transaction.
 */
@interface GethTransactOpts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (GethAddress*)getFrom;
- (int64_t)getGasLimit;
- (GethBigInt*)getGasPrice;
- (int64_t)getNonce;
- (GethBigInt*)getValue;
- (void)setContext:(GethContext*)context;
- (void)setFrom:(GethAddress*)from;
- (void)setGasLimit:(int64_t)limit;
- (void)setGasPrice:(GethBigInt*)price;
- (void)setNonce:(int64_t)nonce;
- (void)setSigner:(id<GethSigner>)s;
- (void)setValue:(GethBigInt*)value;
@end

/**
 * Transaction represents a single Ethereum transaction.
 */
@interface GethTransaction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewTransaction creates a new transaction with the given properties.
 */
- (instancetype)init:(int64_t)nonce to:(GethAddress*)to amount:(GethBigInt*)amount gasLimit:(GethBigInt*)gasLimit gasPrice:(GethBigInt*)gasPrice data:(NSData*)data;
/**
 * NewTransactionFromJSON parses a transaction from an JSON data dump.
 */
- (instancetype)initFromJSON:(NSString*)data;
/**
 * NewTransactionFromRLP parses a transaction from an RLP data dump.
 */
- (instancetype)initFromRLP:(NSData*)data;
/**
 * EncodeJSON encodes a transaction into an JSON data dump.
 */
- (NSString*)encodeJSON:(NSError**)error;
/**
 * EncodeRLP encodes a transaction into an RLP data dump.
 */
- (NSData*)encodeRLP:(NSError**)error;
- (GethBigInt*)getCost;
- (NSData*)getData;
/**
 * Deprecated: use EthereumClient.TransactionSender
 */
- (GethAddress*)getFrom:(GethBigInt*)chainID error:(NSError**)error;
- (int64_t)getGas;
- (GethBigInt*)getGasPrice;
- (GethHash*)getHash;
- (int64_t)getNonce;
/**
 * Deprecated: GetSigHash cannot know which signer to use.
 */
- (GethHash*)getSigHash;
- (GethAddress*)getTo;
- (GethBigInt*)getValue;
/**
 * String implements the fmt.Stringer interface to print some semi-meaningful
data dump of the transaction for debugging purposes.
 */
- (NSString*)string;
- (GethTransaction*)withSignature:(NSData*)sig chainID:(GethBigInt*)chainID error:(NSError**)error;
@end

/**
 * Transactions represents a slice of transactions.
 */
@interface GethTransactions : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Get returns the transaction at the given index from the slice.
 */
- (GethTransaction*)get:(long)index error:(NSError**)error;
/**
 * Size returns the number of transactions in the slice.
 */
- (long)size;
@end

/**
 * LightScryptN is the N parameter of Scrypt encryption algorithm, using 4MB
memory and taking approximately 100ms CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GethLightScryptN;
/**
 * LightScryptP is the P parameter of Scrypt encryption algorithm, using 4MB
memory and taking approximately 100ms CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GethLightScryptP;
/**
 * StandardScryptN is the N parameter of Scrypt encryption algorithm, using 256MB
memory and taking approximately 1s CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GethStandardScryptN;
/**
 * StandardScryptP is the P parameter of Scrypt encryption algorithm, using 256MB
memory and taking approximately 1s CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GethStandardScryptP;

/**
 * BindContract creates a low level contract interface through which calls and
transactions may be made through.
 */
FOUNDATION_EXPORT GethBoundContract* GethBindContract(GethAddress* address, NSString* abiJSON, GethEthereumClient* client, NSError** error);

/**
 * DeployContract deploys a contract onto the Ethereum blockchain and binds the
deployment address with a wrapper.
 */
FOUNDATION_EXPORT GethBoundContract* GethDeployContract(GethTransactOpts* opts, NSString* abiJSON, NSData* bytecode, GethEthereumClient* client, GethInterfaces* args, NSError** error);

/**
 * FoundationBootnodes returns the enode URLs of the P2P bootstrap nodes operated
by the foundation running the V5 discovery protocol.
 */
FOUNDATION_EXPORT GethEnodes* GethFoundationBootnodes(void);

/**
 * MainnetGenesis returns the JSON spec to use for the main Ethereum network. It
is actually empty since that defaults to the hard coded binary genesis block.
 */
FOUNDATION_EXPORT NSString* GethMainnetGenesis(void);

/**
 * NewAddressFromBytes converts a slice of bytes to a hash value.
 */
FOUNDATION_EXPORT GethAddress* GethNewAddressFromBytes(NSData* binary, NSError** error);

/**
 * NewAddressFromHex converts a hex string to a address value.
 */
FOUNDATION_EXPORT GethAddress* GethNewAddressFromHex(NSString* hex, NSError** error);

/**
 * NewAddresses creates a slice of uninitialized addresses.
 */
FOUNDATION_EXPORT GethAddresses* GethNewAddresses(long size);

/**
 * NewAddressesEmpty creates an empty slice of Addresses values.
 */
FOUNDATION_EXPORT GethAddresses* GethNewAddressesEmpty(void);

/**
 * NewBigInt allocates and returns a new BigInt set to x.
 */
FOUNDATION_EXPORT GethBigInt* GethNewBigInt(int64_t x);

/**
 * NewBlockFromJSON parses a block from an JSON data dump.
 */
FOUNDATION_EXPORT GethBlock* GethNewBlockFromJSON(NSString* data, NSError** error);

/**
 * NewBlockFromRLP parses a block from an RLP data dump.
 */
FOUNDATION_EXPORT GethBlock* GethNewBlockFromRLP(NSData* data, NSError** error);

/**
 * NewCallMsg creates an empty contract call parameter list.
 */
FOUNDATION_EXPORT GethCallMsg* GethNewCallMsg(void);

/**
 * NewCallOpts creates a new option set for contract calls.
 */
FOUNDATION_EXPORT GethCallOpts* GethNewCallOpts(void);

/**
 * NewContext returns a non-nil, empty Context. It is never canceled, has no
values, and has no deadline. It is typically used by the main function,
initialization, and tests, and as the top-level Context for incoming requests.
 */
FOUNDATION_EXPORT GethContext* GethNewContext(void);

/**
 * NewEnode parses a node designator.

There are two basic forms of node designators
  - incomplete nodes, which only have the public key (node ID)
  - complete nodes, which contain the public key and IP/Port information

For incomplete nodes, the designator must look like one of these

   enode://<hex node id>
   <hex node id>

For complete nodes, the node ID is encoded in the username portion
of the URL, separated from the host by an @ sign. The hostname can
only be given as an IP address, DNS domain names are not allowed.
The port in the host name section is the TCP listening port. If the
TCP and UDP (discovery) ports differ, the UDP port is specified as
query parameter "discport".

In the following example, the node URL describes
a node with IP address 10.3.58.6, TCP listening port 30303
and UDP discovery port 30301.

   enode://<hex node id>@10.3.58.6:30303?discport=30301
 */
FOUNDATION_EXPORT GethEnode* GethNewEnode(NSString* rawurl, NSError** error);

/**
 * NewEnodes creates a slice of uninitialized enodes.
 */
FOUNDATION_EXPORT GethEnodes* GethNewEnodes(long size);

/**
 * NewEnodesEmpty creates an empty slice of Enode values.
 */
FOUNDATION_EXPORT GethEnodes* GethNewEnodesEmpty(void);

/**
 * NewEthereumClient connects a client to the given URL.
 */
FOUNDATION_EXPORT GethEthereumClient* GethNewEthereumClient(NSString* rawurl, NSError** error);

/**
 * NewFilterQuery creates an empty filter query for contact log filtering.
 */
FOUNDATION_EXPORT GethFilterQuery* GethNewFilterQuery(void);

/**
 * NewHashFromBytes converts a slice of bytes to a hash value.
 */
FOUNDATION_EXPORT GethHash* GethNewHashFromBytes(NSData* binary, NSError** error);

/**
 * NewHashFromHex converts a hex string to a hash value.
 */
FOUNDATION_EXPORT GethHash* GethNewHashFromHex(NSString* hex, NSError** error);

/**
 * NewHashes creates a slice of uninitialized Hashes.
 */
FOUNDATION_EXPORT GethHashes* GethNewHashes(long size);

/**
 * NewHashesEmpty creates an empty slice of Hashes values.
 */
FOUNDATION_EXPORT GethHashes* GethNewHashesEmpty(void);

/**
 * NewHeaderFromJSON parses a header from an JSON data dump.
 */
FOUNDATION_EXPORT GethHeader* GethNewHeaderFromJSON(NSString* data, NSError** error);

/**
 * NewHeaderFromRLP parses a header from an RLP data dump.
 */
FOUNDATION_EXPORT GethHeader* GethNewHeaderFromRLP(NSData* data, NSError** error);

/**
 * NewInterface creates a new empty interface that can be used to pass around
generic types.
 */
FOUNDATION_EXPORT GethInterface* GethNewInterface(void);

/**
 * NewInterfaces creates a slice of uninitialized interfaces.
 */
FOUNDATION_EXPORT GethInterfaces* GethNewInterfaces(long size);

/**
 * NewKeyStore creates a keystore for the given directory.
 */
FOUNDATION_EXPORT GethKeyStore* GethNewKeyStore(NSString* keydir, long scryptN, long scryptP);

/**
 * NewNode creates and configures a new Geth node.
 */
FOUNDATION_EXPORT GethNode* GethNewNode(NSString* datadir, GethNodeConfig* config, NSError** error);

/**
 * NewNodeConfig creates a new node option set, initialized to the default values.
 */
FOUNDATION_EXPORT GethNodeConfig* GethNewNodeConfig(void);

/**
 * NewReceiptFromJSON parses a transaction receipt from an JSON data dump.
 */
FOUNDATION_EXPORT GethReceipt* GethNewReceiptFromJSON(NSString* data, NSError** error);

/**
 * NewReceiptFromRLP parses a transaction receipt from an RLP data dump.
 */
FOUNDATION_EXPORT GethReceipt* GethNewReceiptFromRLP(NSData* data, NSError** error);

/**
 * NewTopics creates a slice of uninitialized Topics.
 */
FOUNDATION_EXPORT GethTopics* GethNewTopics(long size);

/**
 * NewTopicsEmpty creates an empty slice of Topics values.
 */
FOUNDATION_EXPORT GethTopics* GethNewTopicsEmpty(void);

/**
 * NewTransaction creates a new transaction with the given properties.
 */
FOUNDATION_EXPORT GethTransaction* GethNewTransaction(int64_t nonce, GethAddress* to, GethBigInt* amount, GethBigInt* gasLimit, GethBigInt* gasPrice, NSData* data);

/**
 * NewTransactionFromJSON parses a transaction from an JSON data dump.
 */
FOUNDATION_EXPORT GethTransaction* GethNewTransactionFromJSON(NSString* data, NSError** error);

/**
 * NewTransactionFromRLP parses a transaction from an RLP data dump.
 */
FOUNDATION_EXPORT GethTransaction* GethNewTransactionFromRLP(NSData* data, NSError** error);

/**
 * RinkebyGenesis returns the JSON spec to use for the Rinkeby test network
 */
FOUNDATION_EXPORT NSString* GethRinkebyGenesis(void);

/**
 * SetVerbosity sets the global verbosity level (between 0 and 6 - see logger/verbosity.go).
 */
FOUNDATION_EXPORT void GethSetVerbosity(long level);

/**
 * TestnetGenesis returns the JSON spec to use for the Ethereum test network.
 */
FOUNDATION_EXPORT NSString* GethTestnetGenesis(void);

@class GethFilterLogsHandler;

@class GethNewHeadHandler;

@class GethSigner;

/**
 * FilterLogsHandler is a client-side subscription callback to invoke on events and
subscription failure.
 */
@interface GethFilterLogsHandler : NSObject <goSeqRefInterface, GethFilterLogsHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onError:(NSString*)failure;
- (void)onFilterLogs:(GethLog*)log;
@end

/**
 * NewHeadHandler is a client-side subscription callback to invoke on events and
subscription failure.
 */
@interface GethNewHeadHandler : NSObject <goSeqRefInterface, GethNewHeadHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onError:(NSString*)failure;
- (void)onNewHead:(GethHeader*)header;
@end

/**
 * Signer is an interaface defining the callback when a contract requires a
method to sign the transaction before submission.
 */
@interface GethSigner : NSObject <goSeqRefInterface, GethSigner> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (GethTransaction*)sign:(GethAddress*)p0 p1:(GethTransaction*)p1 error:(NSError**)error;
@end

#endif
